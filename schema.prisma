generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  shares             Share[]
  crawls             Crawl[]
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")


  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  crawls        Crawl[]
  shares        Share[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Crawl {
  id        Int      @id @default(autoincrement())
  accountId Int      @map(name: "account_id")
  account   Account  @relation(fields: [accountId], references: [id])
  userId    Int      @map(name: "user_id")
  user      User     @relation(fields: [userId], references: [id])
  shares    Share[]
  sinceId   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "crawls")
}

model Share {
  id        Int      @id @default(autoincrement())
  accountId Int      @map(name: "account_id")
  account   Account  @relation(fields: [accountId], references: [id])
  userId    Int      @map(name: "user_id")
  user      User     @relation(fields: [userId], references: [id])
  crawlId   Int      @map(name: "crawl_id")
  crawl     Crawl    @relation(fields: [crawlId], references: [id])
  tweetId   String   @map(name: "tweet_id")
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  articleId Int      @map(name: "article_id")
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "shares")
}

model Article {
  id          Int      @id @default(autoincrement())
  href        String   @unique
  title       String
  description String
  publisher   String
  byline      String
  heroImage   String   @map(name: "hero_image")
  publishedAt DateTime @map(name: "published_at")
  tweets      Tweet[]
  shares      Share[]
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "articles")
}

model Tweet {
  id          String   @id
  fullText    String   @map(name: "full_text")
  publishedAt DateTime @map(name: "published_at")
  authorId    String
  author      Handle   @relation(fields: [authorId], references: [id])
  articleId   Int      @map(name: "article_id")
  article     Article  @relation(fields: [articleId], references: [id])
  shares      Share[]
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "tweets")
}

model Handle {
  id           String   @id
  screenName   String   @map(name: "screen_name")
  displayName  String   @map(name: "display_name")
  protected    Boolean
  profileImage String   @map(name: "profile_image")
  tweets       Tweet[]
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "handles")
}